target_link_libraries(wpa_client systemd)

#include <systemd/sd-bus.h>
    
    const char* ifname = "wlp3s0";
    sd_bus_error error = SD_BUS_ERROR_NULL;
    sd_bus_message *m = NULL;
    sd_bus *bus = NULL;
    const char *path;
    int r;
    r = sd_bus_open_system(&bus);
    if (r < 0)
    {
        fprintf(stderr, "Failed to connect to the system bus: %s\n", strerror(-r));
        return r;
    }
    r = sd_bus_call_method(bus, WPAS_DBUS_SERVICE, WPAS_DBUS_OPATH, WPAS_DBUS_INTERFACE, "GetInterface", &error, &m, "s", ifname);
    if (r < 0)
    {
        fprintf(stderr, "Failed to issue the method call: %s\n", error.message);
        return r;
    }
    r = sd_bus_message_read(m, "o", &path);
    if (r < 0)
    {
        fprintf(stderr, "Failed to parse the response message: %s\n", strerror(-r));
        return r;
    }
    std::cout << "Queued service job as" << path << "\n" << std::endl;





Based on the basic layer:
    auto wpas_obj = sdbus::createProxy(WPAS_DBUS_SERVICE, WPAS_DBUS_OPATH);
    wpas_obj->registerSignalHandler(WPAS_DBUS_INTERFACES_INTERFACE, "ScanDone", &scanDone);
    wpas_obj->registerSignalHandler(WPAS_DBUS_INTERFACES_INTERFACE, "PropertiesChanged", &propertiesChanged);
    wpas_obj->finishRegistration();

    sdbus::ObjectPath path;
    auto method = wpas_obj->createMethodCall(WPAS_DBUS_INTERFACE, "GetInterface");
    method << ifname;
    auto obj = wpas_obj->callMethod(method);
    obj >> path;



WPA:
    std::map<std::string, sdbus::Variant> wpa;
    wpa = net_obj->getProperty("WPA")
        .onInterface(WPAS_DBUS_BSS_INTERFACE);
    if (wpa.count("KeyMgmt") > 0)
        std::string wpaS = "yes";
    else
        std::string wpaS = "no";


